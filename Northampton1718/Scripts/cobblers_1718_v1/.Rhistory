}
}
if ((mstats$Timing[row]>45) & (mstats$Timing[row]<=60)) {
mstats$min_range[row]<-c("46 - 60 mins")
}
if ((mstats$Timing[row]>60) & (mstats$Timing[row]<=75)) {
mstats$min_range[row]<-c("61 - 75 mins")
}
if ((mstats$Timing[row]>75) & (mstats$Timing[row]<=90)) {
mstats$min_range[row]<-c("76 - 90 mins")
if ((mstats$added_time[row]>0) & (mstats$Timing[row]==90)) {
mstats$Timing[row]<-as.integer(91)
mstats$min_range[row]<-c("90+")
}
}
}
mstats<-read.csv("match_data_v2.csv")
# remove rows of dataframe where event type = NONE
mstats<- subset(mstats, event_type!="NONE")
# strip out whitespace from event_player field
mstats$event_player <- trimws(mstats$event_player)
# set timing field as integer
mstats$Timing <- as.integer(mstats$Timing)
mstats$added_time <- as.integer(mstats$added_time)
# set match_date as date field
mstats$match_date <- as.Date(mstats$match_date, format = '%d-%m-%Y')
mstats$min_range <- ""
for (row in 1:nrow(mstats)) {
if ((mstats$Timing[row]>0) & (mstats$Timing[row]<=15)) {
mstats$min_range[row]<-c("1 - 15 mins")
}
if ((mstats$Timing[row]>15) & (mstats$Timing[row]<=30)) {
mstats$min_range[row]<-c("16 - 30 mins")
}
if ((mstats$Timing[row]>30) & (mstats$Timing[row]<=45)) {
mstats$min_range[row]<-c("31 - 45 mins")
if ((mstats$added_time[row]>0) & (mstats$Timing[row]==45)) {
mstats$Timing[row]<-as.numeric(45.5)
mstats$min_range[row]<-c("45+")
}
}
if ((mstats$Timing[row]>45) & (mstats$Timing[row]<=60)) {
mstats$min_range[row]<-c("46 - 60 mins")
}
if ((mstats$Timing[row]>60) & (mstats$Timing[row]<=75)) {
mstats$min_range[row]<-c("61 - 75 mins")
}
if ((mstats$Timing[row]>75) & (mstats$Timing[row]<=90)) {
mstats$min_range[row]<-c("76 - 90 mins")
if ((mstats$added_time[row]>0) & (mstats$Timing[row]==90)) {
mstats$Timing[row]<-as.integer(91)
mstats$min_range[row]<-c("90+")
}
}
}
setwd("~/Documents/Data Science/SoccerAnalytics/Northampton1718/Scripts/cobblers_1718_v1")
mstats$min_range <- ""
for (row in 1:nrow(mstats)) {
if ((mstats$Timing[row]>0) & (mstats$Timing[row]<=15)) {
mstats$min_range[row]<-c("1 - 15 mins")
}
if ((mstats$Timing[row]>15) & (mstats$Timing[row]<=30)) {
mstats$min_range[row]<-c("16 - 30 mins")
}
if ((mstats$Timing[row]>30) & (mstats$Timing[row]<=45)) {
mstats$min_range[row]<-c("31 - 45 mins")
if ((mstats$added_time[row]>0) & (mstats$Timing[row]==45)) {
mstats$Timing[row]<-as.numeric(45.5)
mstats$min_range[row]<-c("45+")
}
}
if ((mstats$Timing[row]>45) & (mstats$Timing[row]<=60)) {
mstats$min_range[row]<-c("46 - 60 mins")
}
if ((mstats$Timing[row]>60) & (mstats$Timing[row]<=75)) {
mstats$min_range[row]<-c("61 - 75 mins")
}
if ((mstats$Timing[row]>75) & (mstats$Timing[row]<=90)) {
mstats$min_range[row]<-c("76 - 90 mins")
if ((mstats$added_time[row]>0) & (mstats$Timing[row]==90)) {
mstats$Timing[row]<-as.integer(91)
mstats$min_range[row]<-c("90+")
}
}
}
mstats<-read.csv("match_data_v2.csv")
# remove rows of dataframe where event type = NONE
mstats<- subset(mstats, event_type!="NONE")
# strip out whitespace from event_player field
mstats$event_player <- trimws(mstats$event_player)
# set timing field as integer
mstats$Timing <- as.integer(mstats$Timing)
mstats$added_time <- as.integer(mstats$added_time)
# set match_date as date field
mstats$match_date <- as.Date(mstats$match_date, format = '%d-%m-%Y')
mstats$min_range <- ""
for (row in 1:nrow(mstats)) {
if ((mstats$Timing[row]>0) & (mstats$Timing[row]<=15)) {
mstats$min_range[row]<-c("1 - 15 mins")
}
if ((mstats$Timing[row]>15) & (mstats$Timing[row]<=30)) {
mstats$min_range[row]<-c("16 - 30 mins")
}
if ((mstats$Timing[row]>30) & (mstats$Timing[row]<=45)) {
mstats$min_range[row]<-c("31 - 45 mins")
if ((mstats$added_time[row]>0) & (mstats$Timing[row]==45)) {
mstats$Timing[row]<-as.numeric(45.5)
mstats$min_range[row]<-c("45+")
}
}
if ((mstats$Timing[row]>45) & (mstats$Timing[row]<=60)) {
mstats$min_range[row]<-c("46 - 60 mins")
}
if ((mstats$Timing[row]>60) & (mstats$Timing[row]<=75)) {
mstats$min_range[row]<-c("61 - 75 mins")
}
if ((mstats$Timing[row]>75) & (mstats$Timing[row]<=90)) {
mstats$min_range[row]<-c("76 - 90 mins")
if ((mstats$added_time[row]>0) & (mstats$Timing[row]==90)) {
mstats$Timing[row]<-as.integer(91)
mstats$min_range[row]<-c("90+")
}
}
}
tst <- table(mstats$event_type)
tst
tst[1]
tst[0]
tst[2]
tst[1][0]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
factor(mdata$event_type,levels = mdata$event_type)
factor(mstats$event_type,levels = mstats$event_type)
library(tidyverse)
as_data_frame(tst)
tst
tst1 <- as_data_frame(tst)
View(tst1)
tst1$Var1
ggplot(tst, aes(x = tst1$Var1,
fill=mdata$event_type)) +
geom_bar(stat = "count") +
coord_flip()
ggplot(tst, aes(x = tst1$Var1,
fill=tst1$Var1)) +
geom_bar(stat = "count") +
coord_flip()
runApp('cobb_app.R')
runApp('~/Documents/Data Science/Attendance Prediction/R_Shiny_App/soccer')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
library(plotly)
p <- plot_ly(x = c(20, 14, 23), y = c('giraffes', 'orangutans', 'monkeys'), type = 'bar', orientation = 'h')
tst1
tst1[3]
tst1[2]
ggplot(tst, aes(x = tst1$Var1,
fill=tst1$Var1)) +
geom_bar(stat = "count") +
coord_flip()
tst1 <- as.data.frame.matrix(tst)
ggplot(tst, aes(x = tst,
fill=tst1$Var1)) +
geom_bar(stat = "count") +
coord_flip()
ggplot(tst, aes(x = tst,
fill=tst[0])) +
geom_bar(stat = "count") +
coord_flip()
counts <- table(mstats$event_type)
barplot(counts, main="Event Types", horiz=TRUE)
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
help("fct_infreq")
runApp('cobb_app.R')
runApp('cobb_app.R')
tst[2]
e_type <- table(mstats$event_type)
e_type
e_type <- table(mstats$match_date, mstats$event_type)
e_type
e_type <- data.frame(table(mstats$match_date, mstats$event_type))
e_type$Var2
e_type
ggplot(e_type, aes(x = e_type$Var2,
fill=e_type$Var2) +
geom_bar(stat = "count") +
coord_flip()
ggplot(e_type, aes(x = e_type$Var2,
fill=e_type$Var2) +
geom_bar(stat = "count")
View(e_type)
evts_date <- data.frame(table(mstats$match_date, mstats$event_type))
View(evts_date)
evts_date <- data.frame(table(mstats$match_date, mstats$H_A, mstats$event_type, mstats$min_range))
View(evts_date)
corn_cobb <- subset(evts_date,Var2=="HOME" & Var3="CORNER COBBLERS")
corn_cobb <- subset(evts_date,Var2=="HOME" & Var3=="CORNER COBBLERS")
View(corn_cobb)
corn_cobb <- subset(evts_date, Var3=="CORNER COBBLERS")
View(mstats)
table(mstats$match_date,mstats$H_A)
View(evts_date)
home_matches <- subset(mstats,"H_A"=="HOME")
home_matches <- subset(mstats,H_A=="HOME")
View(home_matches)
home_matches <- subset(mstats,H_A=="HOME")
away_matches <- subset(mstats,H_A=="AWAY")
evts_date_h <- data.frame(table(home_matches$match_date, home_matches$event_type))
evts_date_a <- data.frame(table(away_matches$match_date, away_matches$event_type))
View(evts_date_a)
View(evts_date_h)
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
evts_date <- data.frame(table(mstats$match_date, away_matches$event_type))
evts_date <- data.frame(table(mstats$match_date, mstats$event_type))
runApp('cobb_app.R')
View(evts_date)
runApp('cobb_app.R')
install.packages("beeswarm")
View(mstats)
tmp1 <- subset(mstats,event_type=="CORNER COBBLERS")
View(tmp1)
stripchart(tmp1$Timing,
main="Multiple stripchart for comparision",
xlab="Minute of Match",
ylab="Event Type",
method="jitter",
col=c("orange","red"),
pch=16
)
stripchart(tmp1$Timing,
main="Multiple stripchart for comparision",
xlab="Minute of Match",
ylab="Event Type",
method="stack",
col=c("orange","red"),
pch=16
)
stripchart(tmp1$Timing,
main="Multiple stripchart for comparision",
xlab="Minute of Match",
ylab="Event Type",
method="jitter",
col=c("orange","red"),
pch=12
)
stripchart(tmp1$Timing,
main="Multiple stripchart for comparision",
xlab="Minute of Match",
ylab="Event Type",
method="jitter",
col=c("orange","red"),
pch=18
)
stripchart(tmp1$Timing,
main="Multiple stripchart for comparision",
xlab="Minute of Match",
ylab="Event Type",
method="jitter",
col=c("orange","red"),
pch=15
)
stripchart(tmp1$Timing,
main="Multiple stripchart for comparision",
xlab="Minute of Match",
ylab="Event Type",
method="jitter",
col=c("orange","red"),
pch=16
)
stripchart(tmp1$Timing,
main="Multiple stripchart for comparision",
xlab="Minute of Match",
ylab="Event Type",
method="jitter",
col=c("red"),
pch=16
)
beeswarm(event_type ~ Timing, data=mstats, col=sample(colors(), 27), pch=19, method="swarm", cex=0.5)
library("beeswarm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
beeswarm(event_type ~ Timing, data=mstats, col=sample(colors(), 27), pch=19, method="swarm", cex=0.5)
help("beeswarm")
beeswarm(event_type ~ Timing, data=mstats, col=2:4, pch=19, method="swarm", cex=0.5)
beeswarm(mstats$event_type ~ mstats$Timing, data=mstats, col=2:4, pch=19, method="swarm", cex=0.5)
tst3 <- mstats[(mstats$Timing,mstats$event_type),]
tst3 <- mstats[,(mstats$Timing,mstats$event_type)]
tst3 <- mstats[(mstats$Timing,mstats$event_type)]
tst3 <- mstats[(mstats$Timing,mstats$event_type),]
tst3 <- mstats[[mstats$Timing,mstats$event_type],]
tst3 <- mstats[,[mstats$Timing,mstats$event_type]]
tst3 <- mstats[(mstats$Timing,as.character(mstats$event_type)),]
tst3 <- mstats[mstats$Timing]
tst3 <- mstats[(mstats$Timing),]
View(tst3)
tst3 <- mstats[,(mstats$Timing)]
tst3 <- mstats[(mstats$Timing),]
beeswarm(mstats$event_type ~ mstats$Timing, data=mstats, col=2:4, pch=19, method="swarm", cex=0.5)
beeswarm(as.character(mstats$event_type) ~ mstats$Timing, data=mstats, col=2:4, pch=19, method="swarm", cex=0.5)
beeswarm(as.numeric(as.character(mstats$event_type)) ~ mstats$Timing, data=mstats, col=2:4, pch=19, method="swarm", cex=0.5)
beeswarm(mstats$Timing ~ mstats$Timing, data=mstats, col=2:4, pch=19, method="swarm", cex=0.5)
View(tmp1)
beeswarm(mstats$Timing ~ mstats$event_type, data=mstats, col=2:4, pch=19, method="swarm", cex=0.5)
beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4, pch=19, method="swarm", cex=0.5)
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4, pch=19, method="swarm", cex=0.5)
p + coord_flip()
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4,
pch=19, method="swarm", cex=0.5, vertical = FALSE)
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4,
pch=19, method="swarm", cex=0.5, vertical = FALSE,
ylab = "Minute of Match")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4,
pch=19, method="swarm", cex=0.5, vertical = FALSE,
xlab = "Minute of Match", ylab = "Event Type")
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4,
pch=19, method="swarm", cex=1.25, vertical = FALSE,
xlab = "Minute of Match", ylab = "Event Type")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4,
pch=19, method="swarm", cex=1, vertical = FALSE,
xlab = "Minute of Match", ylab = "Event Type")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col=2:4,
pch=16, method="swarm", cex=1, vertical = FALSE,
xlab = "Minute of Match", ylab = "Event Type")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col="red",
pch=16, method="swarm", cex=1, vertical = FALSE,
xlab = "Minute of Match", ylab = "Event Type")
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col="red",
pch=16, method="swarm", cex=1, horizontal = TRUE,
xlab = "Minute of Match", ylab = "Event Type")
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col="red",
pch=16, method="swarm", cex=1, horizontal = TRUE,
xlab = "Minute of Match", ylab = "Event Type", labels = "Corner Cobblers")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col="red",
pch=16, method="center", cex=1, horizontal = TRUE,
xlab = "Minute of Match", ylab = "Event Type", labels = "Corner Cobblers")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col="red",
pch=16, method="center", cex=1, horizontal = TRUE,
xlab = "Minute of Match", ylab = "Event Type", labels = "Corner Cobblers")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col="red",
pch=14, method="center", cex=1, horizontal = TRUE,
xlab = "Minute of Match", ylab = "Event Type", labels = "Corner Cobblers")
# Beeswarm options
p = beeswarm(tmp1$Timing ~ tmp1$event_type, data=tmp1, col="red",
pch=16, method="center", cex=0.8, horizontal = TRUE,
xlab = "Minute of Match", ylab = "Event Type", labels = "Corner Cobblers")
runApp('cobb_app.R')
ggplot(tmp1,aes(Timing, event_type)) + geom_quasirandom(groupOnX=FALSE)
install.packages("ggbeeswarm")
ggplot(tmp1,aes(Timing, event_type)) + geom_quasirandom(groupOnX=FALSE)
library("ggbeeswarm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ggplot(tmp1,aes(Timing, event_type)) + geom_quasirandom(groupOnX=FALSE)
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('~/Documents/Data Science/Attendance Prediction/R_Shiny_App/cobblers_shiny.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
hm1 <- data.frame(table(mstats$event_type, mstats$H_A, mstats$min_range))
View(hm1)
hm_away <- subset(hm1,Var2=="AWAY")
View(hm_away)
hm1 <- data.frame(table(mstats$event_type, mstats$H_A, mstats$min_range))
hm_away <- subset(hm1,Var2=="AWAY")
hm_home <- subset(hm1,Var2=="HOME")
View(hm_away)
ggplot(hm_away, aes(x = Var3, y = Var1)) + geom_tile(aes(fill = Freq)) +
scale_fill_gradient(name = 'Events Types - When Occur in Matches', low = 'white', high = 'red') +
theme(axis.title.y = element_blank())
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
library("scales", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
hmcols<-colorRampPalette(c("light green", "yellow", "orange", "red"))(100)
mm_heatmap <- heatmap( hm_away, Rowv=Var3, Colv=Var1,
col=hmcols,
scale="column",
margins=c(10,10) )
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
help("scale_color_brewer")
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
View(hm1)
View(hm1)
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
runApp('cobb_app.R')
